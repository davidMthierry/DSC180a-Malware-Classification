#!/usr/bin/env python

import sys
import json
import shutil


sys.path.insert(0, 'src') # add library code to path
import etl
import process as pcs
import train as trn

DATA_PARAMS = 'config/data-params.json'
TEST_PARAMS = 'config/test-params.json'


def load_params(fp):
    with open(fp) as fh:
        param = json.load(fh)

    return param


def main(targets):
    # make the clean target
    if 'clean' in targets:
        shutil.rmtree('data/', ignore_errors=True)
        #shutil.rmtree('data/Smali', ignore_errors=True)
        #shutil.rmtree('data/APKs', ignore_errors=True)
        #shutil.rmtree('data/test',ignore_errors=True)
        
        
    if 'test_project' in targets:
        print('Loading Benign Data...')
        #loaded = load_params(TEST_PARAMS)
        #urls, smali_folders = etl.get_data(**loaded)
        #etl.smali_mover(smali_folders)
        b_app_dict = etl.get_smali_files_per_app()
        malware_apps = etl.find_malware_filepaths()
        sampled = etl.sample_malware(malware_apps, 20)
        m_app_dict = etl.get_malware_smali_files_per_app(sampled)
        b_app_dict_train, b_app_dict_test = etl.split_dictionary(b_app_dict)
        m_app_dict_train, m_app_dict_test = etl.split_dictionary(m_app_dict)
        labels = pcs.get_labels(b_app_dict_train,m_app_dict_train)
        

        print('Calculating A Data')
        train_api_calls, train_apis_per_app = pcs.A_matrix_calc(b_app_dict_train, m_app_dict_train)
        A_matrix_train = pcs.A_matrix_func(train_api_calls, train_apis_per_app).tocsr()
        test_api_calls, test_apis_per_app = pcs.A_matrix_calc(b_app_dict_test, m_app_dict_test)
        A_matrix_test = pcs.A_matrix_func(test_api_calls, test_apis_per_app).tocsr()
        

        print('Calculating B Data')
        B_api_calls_train, B_code_blocks_train = pcs.B_matrix_calc(b_app_dict_train,m_app_dict_train)
        B_matrix_train = pcs.B_matrix_func(B_api_calls_train, B_code_blocks_train).tocsr()
        B_api_calls_test, B_code_blocks_test = pcs.B_matrix_calc(b_app_dict_test,m_app_dict_test)
        B_matrix_test = pcs.B_matrix_func(B_api_calls_test, B_code_blocks_test).tocsr()
        

        print('Calculating P Data')
        P_api_calls_train, P_packages_train = pcs.P_matrix_calc(b_app_dict_train,m_app_dict_train)
        P_matrix_train = pcs.P_matrix_func(P_api_calls_train, P_packages_train).tocsr()
        P_api_calls_test, P_packages_test = pcs.P_matrix_calc(b_app_dict_test,m_app_dict_test)
        P_matrix_test = pcs.P_matrix_func(P_api_calls_test, P_packages_test).tocsr()
        

        AAT = A_matrix_train.dot(A_matrix_train.T).todense()
        ABAT = (A_matrix_train.dot(B_matrix_train)).dot(A_matrix_train.T).todense()
        APAT = (A_matrix_train.dot(P_matrix_train)).dot(A_matrix_train.T).todense()
        #APBPA = (((A_matrix_train.dot(P_matrix_train)).dot(B_matrix_train)).dot(P_matrix_train.T)).dot(A_matrix_train.T).todense()

        AAT_test = A_matrix_test.dot(A_matrix_test.T).todense()
        ABAT_test = ((A_matrix_test.dot(B_matrix_test)).dot(A_matrix_test.T)).todense()
        APAT_test = ((A_matrix_test.dot(P_matrix_test)).dot(A_matrix_test.T)).todense()
        #APBPA_test = (((A_matrix_test.dot(P_matrix_test)).dot(B_matrix_test)).dot(P_matrix_test.T)).dot(A_matrix_test.T).todense()
        
        print('Calculating AAT')
        AAT = A_matrix_train.dot(A_matrix_train.T).todense()
        AAT_test = A_matrix_test.dot(A_matrix_test.T).todense()
        model = trn.train_model(AAT, labels)
        AAT_score = trn.assess_model(model, AAT_test, labels)
        print('Classifier accuracy on A(A^T) metapath kernel with 10 apps: {0}'.format(round(AAT_score,8)))

        print('Calculating ABAT')
        ABAT = (A_matrix_train.dot(B_matrix_train)).dot(A_matrix_train.T).todense()
        ABAT_test = ((A_matrix_test.dot(B_matrix_test)).dot(A_matrix_test.T)).todense()
        model = trn.train_model(ABAT, labels)
        ABAT_score = trn.assess_model(model, ABAT_test, labels)
        print('Classifier accuracy on (AB(A^T)) metapath kernel with 10 apps: {0}'.format(round(ABAT_score,8)))
        
        print('Calculating APAT')
        APAT = (A_matrix_train.dot(P_matrix_train)).dot(A_matrix_train.T).todense()
        APAT_test = ((A_matrix_test.dot(P_matrix_test)).dot(A_matrix_test.T)).todense()
        model = trn.train_model(APAT, labels)
        ABAT_score = trn.assess_model(model, ABAT_test, labels)
        print('Classifier accuracy on (AP(A^T)) metapath kernel with 10 apps: {0}'.format(round(ABAT_score,8)))

    if 'test_data' in targets:
        loaded = load_params(DATA_PARAMS)
        urls, smali_folders = etl.get_data(**loaded)
        etl.smali_mover(smali_folders)
        b_app_dict = etl.get_smali_files_per_app()
        malware_apps = etl.find_malware_filepaths()
        sampled = etl.sample_malware(malware_apps, 20)
        m_app_dict = etl.get_malware_smali_files_per_app(sampled)
        b_app_dict_train, b_app_dict_test = etl.split_dictionary(b_app_dict)
        m_app_dict_train, m_app_dict_test = etl.split_dictionary(m_app_dict)


    if 'process' in targets:
        labels = pcs.get_labels(b_app_dict_train,m_app_dict_train)
        train_api_calls, train_apis_per_app = pcs.A_matrix_calc(b_app_dict_train, m_app_dict_train)
        A_matrix_train = pcs.A_matrix_func(train_api_calls, train_apis_per_app).tocsr()
        test_api_calls, test_apis_per_app = pcs.A_matrix_calc(b_app_dict_test, m_app_dict_test)
        A_matrix_test = pcs.A_matrix_func(test_api_calls, test_apis_per_app).tocsr()

        B_api_calls_train, B_code_blocks_train = pcs.B_matrix_calc(b_app_dict_train,m_app_dict_train)
        B_matrix_train = pcs.B_matrix_func(B_api_calls_train, B_code_blocks_train).tocsr()
        B_api_calls_test, B_code_blocks_test = pcs.B_matrix_calc(b_app_dict_test,m_app_dict_test)
        B_matrix_test = pcs.B_matrix_func(B_api_calls_test, B_code_blocks_test).tocsr()
        
        P_api_calls_train, P_packages_train = pcs.P_matrix_calc(b_app_dict_train,m_app_dict_train)
        P_matrix_train = pcs.P_matrix_func(P_api_calls_train, P_packages_train).tocsr()
        P_api_calls_test, P_packages_test = pcs.P_matrix_calc(b_app_dict_test,m_app_dict_test)
        P_matrix_test = pcs.P_matrix_func(P_api_calls_test, P_packages_test).tocsr()

        AAT = A_matrix_train.dot(A_matrix_train.T).todense()
        ABAT = (A_matrix_train.dot(B_matrix_train)).dot(A_matrix_train.T).todense()
        APAT = (A_matrix_train.dot(P_matrix_train)).dot(A_matrix_train.T).todense()
        APBPA = (((A_matrix_train.dot(P_matrix_train)).dot(B_matrix_train)).dot(P_matrix_train.T)).dot(A_matrix_train.T).todense()

        AAT_test = A_matrix_test.dot(A_matrix_test.T).todense()
        ABAT_test = ((A_matrix_test.dot(B_matrix_test)).dot(A_matrix_test.T)).todense()
        APAT_test = ((A_matrix_test.dot(P_matrix_test)).dot(A_matrix_test.T)).todense()
        APBPA_test = (((A_matrix_test.dot(P_matrix_test)).dot(B_matrix_test)).dot(P_matrix_test.T)).dot(A_matrix_test.T).todense()

    if 'train' in targets:

        AAT = A_matrix_train.dot(A_matrix_train.T).todense()
        AAT_test = A_matrix_test.dot(A_matrix_test.T).todense()
        model = trn.train_model(AAT, labels)
        AAT_score = trn.assess_model(model, AAT_test, labels)

        ABAT = (A_matrix_train.dot(B_matrix_train)).dot(A_matrix_train.T).todense()
        ABAT_test = ((A_matrix_test.dot(B_matrix_test)).dot(A_matrix_test.T)).todense()
        model = trn.train_model(ABAT, labels)
        ABAT_score = trn.assess_model(model, ABAT_test, labels)

        APAT = (A_matrix_train.dot(P_matrix_train)).dot(A_matrix_train.T).todense()
        APAT_test = ((A_matrix_test.dot(P_matrix_test)).dot(A_matrix_test.T)).todense()
        model = trn.train_model(APAT, labels)
        ABAT_score = trn.assess_model(model, ABAT_test, labels)

        APBPA = (((A_matrix_train.dot(P_matrix_train)).dot(B_matrix_train)).dot(P_matrix_train.T)).dot(A_matrix_train.T).todense()
        APBPA_test = (((A_matrix_test.dot(P_matrix_test)).dot(B_matrix_test)).dot(P_matrix_test.T)).dot(A_matrix_test.T).todense()
        model = trn.train_model(APBPA, labels)
        APBPA_score = trn.assess_model(model, APBPA_test, labels)



    if 'analysis' in targets:
        print('Starting analysis...')
        print('Classifier accuracy on A(A^T) metapath kernel with 10 apps: {0}'.format(round(AAT_score,8)))
        print('Classifier accuracy on (AB(A^T)) metapath kernel with 10 apps: {0}'.format(round(ABAT_score,8)))
        print('Classifier accuracy on AP(A^T) metapath kernel with 10 apps: {0}'.format(round(APAT_score,8)))
        #print('Classifier accuracy on APB(P^T)(A^T) metapath kernel with 10 apps: {0}'.format(round(APBPA_score,8)))
        print('...Done')
        

    return


if __name__ == '__main__':
    targets = sys.argv[1:]
    main(targets)